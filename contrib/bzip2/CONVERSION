1. Move the code we want to isolate to its own compilation unit. This
   is so we can use compile-time errors to detect any interactions
   with the rest of the code.

   In this case, we want to wrap the code that interacts with the
   compression and decompression library. A visual inspection shows
   that this is just the functions compressStream(),
   uncompressStream() and testStream().

2. Compile.

   Obviously we will now get errors because of the missing
   functions. Add them to an appropriate new header.

3. Compile.

   Now the first error is:

   "bzip2.c:746: warning: 'applySavedFileAttrToOutputFile' defined but
   not used"

   Without even looking, it is apparent that this function must only
   be used from the wrapped code.

   This function requires authority (it needs to be able to chmod), so
   we have a choice: grant that authority to the wrapped functions, or
   create a capability for it. We choose the latter.

   This is accomplished by allowing the child to call the function
   remotely, by using RPC over a pipe. For now, we only implement the
   parent's side of that - i.e. unmarshalling the arguments, calling
   the function, and returning a return code.

   A small amount of inspection reveals that only the output file
   should be chmod()ed, so we enforce that.

   At this point we also need to include utility code that will be
   part of Capsicum in the future.

4. The remaining unused functions do not require authority, so simply
   move them into the wrapped code.

5. Rename (so we don't accidentally invoke them direactly) and invoke
   the wrapped functions, handing in the capability they require (so
   far). If capability mode is not available, simply call the wrapped
   functions directly.

   Once this is done bzip2.c compiles cleanly once more. However, the
   link fails.

6. Fix the build to include the other files. Fix stupid mistakes. Move
   definitions that need to be shared (and can be safely!).

7. Now we hit an interesting case:

   "bzip2_wrapped.c:123: error: 'blockSize100k' undeclared (first use
   in this function)"

   blockSize100k is a global. Globals are, of course, potential
   communication channels between the wrapped code and its parent. If
   we're lucky, the communication is one way, from parent to child, as
   it is in this case, and so we can simply make them const in the
   wrapped functions. They will have the right values in the wrapped
   function, because we have changed the call to a fork(). We use a
   trick to make the compiler enforce this property. Note that we can
   just assume this is so, and compiler errors will inform us if we
   are incorrect.

8. Continue in this vein until we hit a new problem.

9. Now we need to invoke the function we wrapped in step 3. Note that
   there are some dangling ends left - for example,
   applySavedFileAttrToOutputFile() needs to be renamed in bzip2.c but
   hasn't been yet. No matter: compile errors will point that out to
   us later.

   Note that we could have instead named
   invoke_applySavedFileAttrToOutputFile() as
   applySavedFileAttrToOutputFile(), which would have automatically
   dealt with the rest of bzip2_wrapped.c, since it is static and so
   would not be available in bzip2.c.

10. The next problem is interesting - a global that is changed in the
    child, outputHandleJustInCase. This could have been awkward, since
    it is a FILE *, and we can't directly pass a FILE * over a pipe,
    but luckily the child never does anything but set it to NULL. So
    invent a new wrapped function that does this. Note that once more
    we leave dangling ends to be dealt with later.

11. Continue mechanically. Note that we remove a cast on smallMode,
    which could undo our constification.

    Eventually, it all builds.

    But there's one more thing to do...

12. Sadly, error-driven development fails us here. It wouldn't if we
    had an IDL.

    We need to add unwrappers and capabilities for all the functions
    we wrapped earlier. Luckily, there's a list in bzip2_wrapped.h, so
    we'll just haul those in and get back on track with errors. Note
    that the unwrap functions just take a file descriptor.

13. Define the unwrappers. Note that you have to remember to add them
    to caps[] and adjust the calls where it is used. Again, an IDL
    would fix this.

    Now we're done.
